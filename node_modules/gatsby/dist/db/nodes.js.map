{"version":3,"sources":["../../src/db/nodes.js"],"names":["_","require","store","nodesDb","runFastFiltersAndSort","loadNodeContent","node","isString","internal","content","plugin","getState","flattenedPlugins","find","plug","name","owner","resolve","Error","module","exports","runQuery"],"mappings":";;AACA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAYD,OAAO,CAAE,UAAF,CAAzB;;AACA,MAAME,OAAkB,GAAGF,OAAO,CAAE,gBAAF,CAAlC;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAA4BH,OAAO,CAAE,2BAAF,CAAzC;;AAkBA;;;;;;AAMA,eAAeI,eAAf,CAA+BC,IAA/B,EAAqC;AACnC,MAAIN,CAAC,CAACO,QAAF,CAAWD,IAAI,CAACE,QAAL,CAAcC,OAAzB,CAAJ,EAAuC;AACrC,WAAOH,IAAI,CAACE,QAAL,CAAcC,OAArB;AACD,GAHkC,CAKnC;;;AACA,QAAMC,MAAM,GAAGR,KAAK,CACjBS,QADY,GAEZC,gBAFY,CAEKC,IAFL,CAEUC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcT,IAAI,CAACE,QAAL,CAAcQ,KAF9C,CAAf;;AAIA,QAAM;AAAEX,IAAAA;AAAF,MAAsBJ,OAAO,CAACS,MAAM,CAACO,OAAR,CAAnC;;AAEA,MAAI,CAACZ,eAAL,EAAsB;AACpB,UAAM,IAAIa,KAAJ,CACH,sDAAqDR,MAAM,CAACK,IAAK,EAD9D,CAAN;AAGD;;AAED,QAAMN,OAAO,GAAG,MAAMJ,eAAe,CAACC,IAAD,CAArC;AAEAA,EAAAA,IAAI,CAACE,QAAL,CAAcC,OAAd,GAAwBA,OAAxB;AAEA,SAAOA,OAAP;AACD;;AAEDU,MAAM,CAACC,OAAP,GAAiB,EACf,GAAGjB,OADY;AAEfkB,EAAAA,QAAQ,EAAEjB,qBAFK;AAGfC,EAAAA;AAHe,CAAjB","sourcesContent":["/* @flow */\nconst _ = require(`lodash`)\nconst { store } = require(`../redux`)\nconst nodesDb: NodeStore = require(`../redux/nodes`)\nconst { runFastFiltersAndSort } = require(`../redux/run-fast-filters`)\n\ninterface NodeStore {\n  getNodes: () => Array<any>;\n  getNode: (id: string) => any | undefined;\n  getNodesByType: (type: string) => Array<any>;\n  getTypes: () => Array<string>;\n  hasNodeChanged: (id: string, digest: string) => boolean;\n  getNodeAndSavePathDependency: (id: string, path: string) => any | undefined;\n  runQuery: (args: {\n    gqlType: GraphQLType,\n    queryArgs: Object,\n    firstOnly: boolean,\n    resolvedFields: Object,\n    nodeTypeNames: Array<string>,\n  }) => any | undefined;\n}\n\n/**\n * Get content for a node from the plugin that created it.\n *\n * @param {IGatsbyNode} node\n * @returns {Promise<string>}\n */\nasync function loadNodeContent(node) {\n  if (_.isString(node.internal.content)) {\n    return node.internal.content\n  }\n\n  // Load plugin's loader function\n  const plugin = store\n    .getState()\n    .flattenedPlugins.find(plug => plug.name === node.internal.owner)\n\n  const { loadNodeContent } = require(plugin.resolve)\n\n  if (!loadNodeContent) {\n    throw new Error(\n      `Could not find function loadNodeContent for plugin ${plugin.name}`\n    )\n  }\n\n  const content = await loadNodeContent(node)\n\n  node.internal.content = content\n\n  return content\n}\n\nmodule.exports = {\n  ...nodesDb,\n  runQuery: runFastFiltersAndSort,\n  loadNodeContent,\n}\n"],"file":"nodes.js"}